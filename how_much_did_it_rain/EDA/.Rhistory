install.packages("FCNN4R")
library("xgboost", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
load("~/Documents/Telstra/telstra_my_work/Boosting/Boost_input_data.RData")
rm(evt, rst, svt, trn, lof, severity_type, resource_type, train, event_type ,log_feature)
names(dftrain) <- gsub("\\s", "_", colnames(dftrain))
dft = dftrain
names_dft_invalid <- names(dft[,-c(1,2)][,(apply(dft[,-c(1,2)], 2,var)==0)])
# find indices for these columns in dft
dft_valid <- dft[,which(!is.element(names(dft), names_dft_invalid))]
# turn all variables to integers
dft_valid_int <- as.data.frame(lapply(dft_valid[,-c(1)], as.numeric))
dft_valid_int <- cbind(id = dft_valid[,"id"], dft_valid_int)
# retain only unique values
dftvuf <- unique(dft_valid_int[,-c(1,2)]) ## dft_valid_unique_features (dftvuf)
dim(dftvuf)
XX <- as.matrix(dftvuf)
YY <- as.integer(dft_valid_int[,"fault_severity"]) -1L
xgbMtx = xgb.DMatrix(data = XX, label = YY)
rm(dft, dft_valid, dftrain,dftvuf)
rm(dft, dft_valid, dftrain,dftvuf, names_dft_invalid)
gc()
xgb_par  = list(
objective = "multi:softprob",                     # multi-class: class probability output
eta = 0.1,                                       # learning rate
max.depth = 6,                                     # max tree depth
eval_metric = "mlogloss",                          # evaluation/loss metric
max_delta_step = 1,                            # to counter class-imbalance
num_class = 3,
gamma = 0.001,
alpha = 3
)
set.seed(1055)
xgbmodel <- xgb.train(params = xgb_par,
data = xgbMtx,
nrounds = 300,
verbose = TRUE,
print.every.n = 20,
watchlist <- list(train = xgbMtx),
early.stop.round = 10
)
Trainpred <- matrix(predict(xgbmodel, XX),ncol = length(unique(YY)), byrow = TRUE)
Testpred <- matrix(predict(xgbmodel, testmtx),ncol = length(unique(YY)), byrow = TRUE)
load("~/Documents/Telstra/telstra_my_work/RawData/Merged_only_telstra.RData")
watchlist
View(dffull_valid_num)
View(dffull)
Trainpred
lenTrain <- 7381
lenTest <- 11171
# retain only unique values
dftrain <- unique(dffull_valid_num[1:lenTrain,-c(1,2,3)])
dim(dftrain)
# >> [1] 7381 1324 no rows were unique!! (check again later)
XX <- as.matrix(dftrain)
YY <- as.integer(dffull_valid_num[1:lenTrain,"fault_severity"])
#rm(dftrain)
gc()
cat("\014")
testmtx <- as.matrix(dffull_valid_num[lenTrain +1:lenTest,-c(1,2,3)])
rm(dffull)
rm(dffull, dffull_valid_num, dftrain, dft_valid_int, xgb_par)
Testpred <- matrix(predict(xgbmodel, testmtx),ncol = length(unique(YY)), byrow = TRUE)
Testpred
library("ranger", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
55*2
setwd("~/Documents/Meetup_Competetions/How_much_did_it_rain_II/Code/EDA")
update.packages()
update.packages()
library(knitr); sessionInfo()
R.version
pkgurl <- "https://cran.r-project.org/src/contrib/Archive/knitr/knitr_1.10.tar.gz"
install.packages(pkgurl, repos=NULL, type="source")
library(knitr)
library(knitr); sessionInfo()
library("knitr", lib.loc="~/Library/R/3.2/library")
detach("package:knitr", unload=TRUE)
pkgurl <- "https://cran.r-project.org/src/contrib/Archive/knitr/knitr_1.11.tar.gz"
install.packages(pkgurl, repos=NULL, type="source")
library(knitr)
library(knitr)
detach("package:knitr", unload=TRUE)
options(repos = c(CRAN = "https://cran.revolutionanalytics.com"))
ls -l /Library/Frameworks/R.framework/Versions/
ls -l "/Library/Frameworks/R.framework/Versions/""
